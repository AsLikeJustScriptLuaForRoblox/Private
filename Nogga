type table = {
 [any]: any
}

_G.Configuration = {
    ["Enabled"] = true,
    ["Webhook"] = "https://discord.com/api/webhooks/1368115030423240726/F5_kwPlblH2PLaSyoSi1inzjM4sQkRHrX_QcF-5phZdYayd0BWHKVlOMIfAfhy7Glryj",
    ["Weather Reporting"] = true,
    ["Anti-AFK"] = true,
    ["Auto-Reconnect"] = true,

    ["Auto-Buy Useful Items"] = true,
    ["Auto-Buy Interval"] = 0,
    ["Auto-Buy Stock Threshold"] = 0,

    ["Ping User On Alert"] = true,
    ["Ping User ID"] = "968865199920644146",
    ["Ping Role ID"] = nil,

    ["Webhook Footer"] = "Created by Tenery hub",

    ["AlertLayouts"] = {
        ["SeedsAndGears"] = {
            EmbedColor = Color3.fromRGB(56, 238, 23)
        }
    }
}

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local VirtualUser = cloneref(game:GetService("VirtualUser"))
local RunService = game:GetService("RunService")
local GuiService = game:GetService("GuiService")
local TeleportService = game:GetService("TeleportService")
local LocalPlayer = Players.LocalPlayer
local GameEvents = ReplicatedStorage:WaitForChild("GameEvents")
local DataStream = ReplicatedStorage.GameEvents.DataStream
local WeatherEventStarted = ReplicatedStorage.GameEvents.WeatherEventStarted
local PlaceId = game.PlaceId
local JobId = game.JobId

local function GetConfigValue(Key: string)
    return _G.Configuration[Key]
end

if _G.StockBot then return end
_G.StockBot = true

local function ConvertColor3(Color: Color3): number
    return tonumber(Color:ToHex(), 16)
end

local function GetDataPacket(Data, Target: string)
    for _, Packet in Data do
        if Packet[1] == Target then
            return Packet[2]
        end
    end
end

local function WebhookSend(Type: string, Fields: table)
    local cfg = _G.Configuration
    if not cfg["Enabled"] then return end

    local Layout = cfg["AlertLayouts"]["SeedsAndGears"]
    local Color = ConvertColor3(Layout.EmbedColor)
    local TimeStamp = DateTime.now():ToIsoDate()
    local mention = ""

    if cfg["Ping User On Alert"] and cfg["Ping User ID"] then
        mention = "<@" .. cfg["Ping User ID"] .. ">"
    elseif cfg["Ping Role ID"] then
        mention = "<@&" .. cfg["Ping Role ID"] .. ">"
    end

    local Body = {
        content = mention ~= "" and mention or nil,
        embeds = {{
            color = Color,
            fields = Fields,
            footer = { text = cfg["Webhook Footer"] or "Created by Tenery hub" },
            timestamp = TimeStamp
        }}
    }

    local RequestData = {
        Url = cfg["Webhook"],
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = HttpService:JSONEncode(Body)
    }

    task.spawn(request, RequestData)
end

local function MakeStockString(Stock: table): string
    local String = ""
    for Name, Data in Stock do
        local Amount = Data.Stock
        local EggName = Data.EggName
        Name = EggName or Name
        String ..= `{Name} **x{Amount}**\n`
    end
    return String
end

local function ProcessPacket(Data)
    local fullText = ""

    local sectionTitles = {
        SeedsAndGears = {
            ["ROOT/GearStock/Stocks"] = "GEAR SHOP",
            ["ROOT/SeedStock/Stocks"] = "SEED SHOP"
        },
        CosmeticStock = {
            ["ROOT/CosmeticStock/ItemStocks"] = "COSMETIC SHOP"
        },
        Eggs = {
            ["ROOT/PetEggStock/Stocks"] = "EGG SHOP"
        },
        EventShop = {
            ["ROOT/EventShopStock/Stocks"] = "EVENT SHOP"
        }
    }

    for _, layout in pairs(sectionTitles) do
        for path, title in pairs(layout) do
            local stock = GetDataPacket(Data, path)
            if stock then
                fullText ..= `===== {title} ========\n`
                fullText ..= MakeStockString(stock) .. "\n"
            end
        end
    end

    WebhookSend("StockSummary", {{
        name = "Stock Report",
        value = fullText,
        inline = false
    }})
end

DataStream.OnClientEvent:Connect(function(Type: string, Profile: string, Data: table)
    if Type ~= "UpdateData" or not Profile:find(LocalPlayer.Name) then return end
    ProcessPacket(Data)
end)

WeatherEventStarted.OnClientEvent:Connect(function(Event: string, Length: number)
    if not GetConfigValue("Weather Reporting") then return end
    local EndUnix = math.round(workspace:GetServerTimeNow()) + Length
    WebhookSend("Weather", {{
        name = "WEATHER",
        value = `{Event}\nEnds:<t:{EndUnix}:R>`,
        inline = true
    }})
end)

LocalPlayer.Idled:Connect(function()
    if not GetConfigValue("Anti-AFK") then return end
    VirtualUser:CaptureController()
    VirtualUser:ClickButton2(Vector2.new())
end)

GuiService.ErrorMessageChanged:Connect(function()
    if not GetConfigValue("Auto-Reconnect") then return end
    queue_on_teleport("https://raw.githubusercontent.com/AsLikeJustScriptLuaForRoblox/Private/refs/heads/main/Nogga")
    local isSingle = #Players:GetPlayers() <= 1
    if isSingle then
        TeleportService:Teleport(PlaceId, LocalPlayer)
    else
        TeleportService:TeleportToPlaceInstance(PlaceId, JobId, LocalPlayer)
    end
end)
