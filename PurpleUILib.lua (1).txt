-- Purple UI Library for Roblox
-- Compatible with PC and Mobile

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()

local Library = {}
Library.Elements = {}
Library.Dragging = false
Library.Delta = 0

-- Theme colors
Library.Theme = {
    Background = Color3.fromRGB(40, 35, 60),
    Accent = Color3.fromRGB(125, 65, 200),
    Text = Color3.fromRGB(255, 255, 255),
    Border = Color3.fromRGB(80, 70, 120),
    DarkAccent = Color3.fromRGB(90, 50, 140),
    LightAccent = Color3.fromRGB(150, 100, 230)
}

-- Create the main UI
function Library:CreateWindow(title, size)
    local Window = {}
    
    -- Default size if not provided
    size = size or UDim2.new(0, 300, 0, 350)
    
    -- Create the main frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "PurpleUILib"
    MainFrame.Size = UDim2.new(0, size.X.Offset, 0, size.Y.Offset)
    MainFrame.Position = UDim2.new(0.5, -size.X.Offset / 2, 0.5, -size.Y.Offset / 2)
    MainFrame.BackgroundColor3 = Library.Theme.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.Active = true
    
    -- Create ScreenGui with proper settings for all devices
    local gui = Instance.new("ScreenGui")
    gui.Name = "PurpleUIScreenGui"
    gui.ResetOnSpawn = false
    gui.IgnoreGuiInset = true
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Make GUI work on all devices
    if syn then
        syn.protect_gui(gui)
        gui.Parent = game:GetService("CoreGui")
    else
        gui.Parent = Player.PlayerGui
    end
    
    MainFrame.Parent = gui
    
    -- Make UI responsive to screen size changes
    local function updateUIScale()
        local viewportSize = workspace.CurrentCamera.ViewportSize
        local scale = math.min(viewportSize.X / 1920, viewportSize.Y / 1080)
        scale = math.clamp(scale, 0.5, 1.2) -- Limit scaling range
        
        -- Apply scale
        MainFrame.Size = UDim2.new(0, size.X.Offset * scale, 0, size.Y.Offset * scale)
        MainFrame.Position = UDim2.new(0.5, -(size.X.Offset * scale) / 2, 0.5, -(size.Y.Offset * scale) / 2)
    end
    
    -- Update scale on viewport size change
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(updateUIScale)
    updateUIScale() -- Initial scale update
    
    -- Add corner radius
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 6)
    Corner.Parent = MainFrame
    
    -- Create title bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Library.Theme.Accent
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame
    
    -- Add corner radius to title bar
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 6)
    TitleCorner.Parent = TitleBar
    
    -- Fix the bottom corners of title bar
    local FixTitleCorners = Instance.new("Frame")
    FixTitleCorners.Size = UDim2.new(1, 0, 0.5, 0)
    FixTitleCorners.Position = UDim2.new(0, 0, 0.5, 0)
    FixTitleCorners.BackgroundColor3 = Library.Theme.Accent
    FixTitleCorners.BorderSizePixel = 0
    FixTitleCorners.Parent = TitleBar
    
    -- Title text
    local TitleText = Instance.new("TextLabel")
    TitleText.Name = "Title"
    TitleText.Size = UDim2.new(1, -10, 1, 0)
    TitleText.Position = UDim2.new(0, 10, 0, 0)
    TitleText.BackgroundTransparency = 1
    TitleText.Text = title or "Purple UI Library"
    TitleText.TextColor3 = Library.Theme.Text
    TitleText.TextSize = 16
    TitleText.Font = Enum.Font.GothamSemibold
    TitleText.TextXAlignment = Enum.TextXAlignment.Left
    TitleText.Parent = TitleBar
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 24, 0, 24)
    CloseButton.Position = UDim2.new(1, -27, 0, 3)
    CloseButton.BackgroundColor3 = Library.Theme.DarkAccent
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Library.Theme.Text
    CloseButton.TextSize = 14
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Parent = TitleBar
    
    -- Add corner radius to close button
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 4)
    CloseCorner.Parent = CloseButton
    
    -- Content container
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Name = "Content"
    ContentFrame.Size = UDim2.new(1, -20, 1, -40)
    ContentFrame.Position = UDim2.new(0, 10, 0, 35)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.Parent = MainFrame
    
    -- Create scrolling frame for elements
    local ElementsFrame = Instance.new("ScrollingFrame")
    ElementsFrame.Name = "Elements"
    ElementsFrame.Size = UDim2.new(1, 0, 1, 0)
    ElementsFrame.BackgroundTransparency = 1
    ElementsFrame.BorderSizePixel = 0
    ElementsFrame.ScrollBarThickness = 4
    ElementsFrame.ScrollBarImageColor3 = Library.Theme.LightAccent
    ElementsFrame.CanvasSize = UDim2.new(0, 0, 0, 0) -- Will be updated as elements are added
    ElementsFrame.Parent = ContentFrame
    
    -- Auto layout for elements
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Padding = UDim.new(0, 8)
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Parent = ElementsFrame
    
    -- Make UI draggable
    local function UpdateDrag(delta)
        if Library.Dragging then
            local Position = UDim2.new(
                MainFrame.Position.X.Scale,
                MainFrame.Position.X.Offset + delta.X,
                MainFrame.Position.Y.Scale,
                MainFrame.Position.Y.Offset + delta.Y
            )
            
            -- Smooth movement using delta time
            local smoothness = math.min(1, Library.Delta * 15)
            MainFrame.Position = MainFrame.Position:Lerp(Position, smoothness)
        end
    end
    
    -- Handle dragging for both PC and mobile
    local DragStart, StartPos
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Library.Dragging = true
            DragStart = input.Position
            StartPos = MainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if Library.Dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - DragStart
            MainFrame.Position = UDim2.new(
                StartPos.X.Scale,
                StartPos.X.Offset + delta.X,
                StartPos.Y.Scale,
                StartPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Library.Dragging = false
        end
    end)
    
    -- Update delta time for smooth animations
    RunService.RenderStepped:Connect(function(delta)
        Library.Delta = delta
    end)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        MainFrame:Destroy()
    end)
    
    -- Function to add a label
    function Window:AddLabel(text, color)
        local labelColor = color or Library.Theme.Text
        
        local LabelFrame = Instance.new("Frame")
        LabelFrame.Name = "Label"
        LabelFrame.Size = UDim2.new(1, 0, 0, 30)
        LabelFrame.BackgroundColor3 = Library.Theme.DarkAccent
        LabelFrame.BorderSizePixel = 0
        LabelFrame.Parent = ElementsFrame
        
        -- Add corner radius
        local LabelCorner = Instance.new("UICorner")
        LabelCorner.CornerRadius = UDim.new(0, 4)
        LabelCorner.Parent = LabelFrame
        
        -- Label text
        local LabelText = Instance.new("TextLabel")
        LabelText.Name = "Text"
        LabelText.Size = UDim2.new(1, -16, 1, 0)
        LabelText.Position = UDim2.new(0, 8, 0, 0)
        LabelText.BackgroundTransparency = 1
        LabelText.Text = text or "Label"
        LabelText.TextColor3 = labelColor
        LabelText.TextSize = 14
        LabelText.Font = Enum.Font.Gotham
        LabelText.TextXAlignment = Enum.TextXAlignment.Left
        LabelText.Parent = LabelFrame
        
        -- Update canvas size
        ElementsFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 8)
        
        local LabelObj = {}
        
        function LabelObj:SetText(newText)
            LabelText.Text = newText
        end
        
        function LabelObj:SetColor(newColor)
            LabelText.TextColor3 = newColor
        end
        
        table.insert(Library.Elements, LabelObj)
        return LabelObj
    end
    
    -- Function to add a button
    function Window:AddButton(text, callback)
        local ButtonFrame = Instance.new("Frame")
        ButtonFrame.Name = "Button"
        ButtonFrame.Size = UDim2.new(1, 0, 0, 35)
        ButtonFrame.BackgroundColor3 = Library.Theme.DarkAccent
        ButtonFrame.BorderSizePixel = 0
        ButtonFrame.Parent = ElementsFrame
        
        -- Add corner radius
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 4)
        ButtonCorner.Parent = ButtonFrame
        
        -- Button
        local Button = Instance.new("TextButton")
        Button.Name = "Button"
        Button.Size = UDim2.new(1, -16, 1, -8)
        Button.Position = UDim2.new(0, 8, 0, 4)
        Button.BackgroundColor3 = Library.Theme.Accent
        Button.Text = text or "Button"
        Button.TextColor3 = Library.Theme.Text
        Button.TextSize = 14
        Button.Font = Enum.Font.Gotham
        Button.Parent = ButtonFrame
        
        -- Add corner radius to button
        local ButtonInnerCorner = Instance.new("UICorner")
        ButtonInnerCorner.CornerRadius = UDim.new(0, 4)
        ButtonInnerCorner.Parent = Button
        
        -- Update the Button click effect with bounce animation
        Button.MouseButton1Click:Connect(function()
            -- Bounce animation
            local bounceOut = {}
            bounceOut.Size = UDim2.new(1, -16, 1, -8)
            bounceOut.Position = UDim2.new(0, 8, 0, 4)
            
            local bounceIn = {}
            bounceIn.Size = UDim2.new(0.95, -16, 0.9, -8)
            bounceIn.Position = UDim2.new(0.025, 8, 0.05, 4)
            
            local colorChange = {}
            colorChange.BackgroundColor3 = Library.Theme.DarkAccent
            
            -- Create tweens with bounce effect
            local bounceInTween = TweenService:Create(
                Button, 
                TweenInfo.new(0.1, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), 
                bounceIn
            )
            
            local bounceOutTween = TweenService:Create(
                Button, 
                TweenInfo.new(0.2, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), 
                bounceOut
            )
            
            local colorTween = TweenService:Create(
                Button, 
                TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), 
                colorChange
            )
            
            -- Play animations in sequence
            bounceInTween:Play()
            colorTween:Play()
            
            bounceInTween.Completed:Connect(function()
                bounceOutTween:Play()
                
                -- Revert color after animation
                task.delay(0.1, function()
                    local revertGoal = {}
                    revertGoal.BackgroundColor3 = Library.Theme.Accent
                    local revertTween = TweenService:Create(
                        Button, 
                        TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), 
                        revertGoal
                    )
                    revertTween:Play()
                end)
            end)
            
            -- Call callback function
            if callback then
                callback()
            end
        end)
        
        -- Update canvas size
        ElementsFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 8)
        
        local ButtonObj = {}
        
        function ButtonObj:SetText(newText)
            Button.Text = newText
        end
        
        table.insert(Library.Elements, ButtonObj)
        return ButtonObj
    end
    
    -- Function to add a toggle
    function Window:AddToggle(text, default, callback)
        local ToggleFrame = Instance.new("Frame")
        ToggleFrame.Name = "Toggle"
        ToggleFrame.Size = UDim2.new(1, 0, 0, 35)
        ToggleFrame.BackgroundColor3 = Library.Theme.DarkAccent
        ToggleFrame.BorderSizePixel = 0
        ToggleFrame.Parent = ElementsFrame
        
        -- Add corner radius
        local ToggleCorner = Instance.new("UICorner")
        ToggleCorner.CornerRadius = UDim.new(0, 4)
        ToggleCorner.Parent = ToggleFrame
        
        -- Toggle text
        local ToggleText = Instance.new("TextLabel")
        ToggleText.Name = "Text"
        ToggleText.Size = UDim2.new(1, -60, 1, 0)
        ToggleText.Position = UDim2.new(0, 8, 0, 0)
        ToggleText.BackgroundTransparency = 1
        ToggleText.Text = text or "Toggle"
        ToggleText.TextColor3 = Library.Theme.Text
        ToggleText.TextSize = 14
        ToggleText.Font = Enum.Font.Gotham
        ToggleText.TextXAlignment = Enum.TextXAlignment.Left
        ToggleText.Parent = ToggleFrame
        
        -- Toggle indicator background
        local ToggleIndicator = Instance.new("Frame")
        ToggleIndicator.Name = "Indicator"
        ToggleIndicator.Size = UDim2.new(0, 40, 0, 20)
        ToggleIndicator.Position = UDim2.new(1, -48, 0.5, -10)
        ToggleIndicator.BackgroundColor3 = Library.Theme.Background
        ToggleIndicator.BorderSizePixel = 0
        ToggleIndicator.Parent = ToggleFrame
        
        -- Add corner radius to indicator
        local IndicatorCorner = Instance.new("UICorner")
        IndicatorCorner.CornerRadius = UDim.new(1, 0)
        IndicatorCorner.Parent = ToggleIndicator
        
        -- Toggle knob
        local ToggleKnob = Instance.new("Frame")
        ToggleKnob.Name = "Knob"
        ToggleKnob.Size = UDim2.new(0, 16, 0, 16)
        ToggleKnob.Position = UDim2.new(0, 2, 0.5, -8)
        ToggleKnob.BackgroundColor3 = Library.Theme.Text
        ToggleKnob.BorderSizePixel = 0
        ToggleKnob.Parent = ToggleIndicator
        
        -- Add corner radius to knob
        local KnobCorner = Instance.new("UICorner")
        KnobCorner.CornerRadius = UDim.new(1, 0)
        KnobCorner.Parent = ToggleKnob
        
        -- Toggle state
        local Enabled = default or false
        
        -- Update toggle appearance based on state
        local function UpdateToggle()
            local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out)
            
            if Enabled then
                -- Move knob to right with bounce
                local knobGoal = {}
                knobGoal.Position = UDim2.new(0, 22, 0.5, -8)
                local knobTween = TweenService:Create(ToggleKnob, tweenInfo, knobGoal)
                knobTween:Play()
                
                -- Change indicator color with bounce effect
                local indicatorGoal = {}
                indicatorGoal.BackgroundColor3 = Library.Theme.Accent
                local indicatorTween = TweenService:Create(ToggleIndicator, tweenInfo, indicatorGoal)
                indicatorTween:Play()
                
                -- Add a slight bounce to the knob
                task.delay(0.05, function()
                    local bounceTween = TweenService:Create(
                        ToggleKnob,
                        TweenInfo.new(0.1, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out),
                        {Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(0, 21, 0.5, -9)}
                    )
                    bounceTween:Play()
                    
                    task.delay(0.1, function()
                        local returnTween = TweenService:Create(
                            ToggleKnob,
                            TweenInfo.new(0.2, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out),
                            {Size = UDim2.new(0, 16, 0, 16), Position = UDim2.new(0, 22, 0.5, -8)}
                        )
                        returnTween:Play()
                    end)
                end)
            else
                -- Move knob to left with bounce
                local knobGoal = {}
                knobGoal.Position = UDim2.new(0, 2, 0.5, -8)
                local knobTween = TweenService:Create(ToggleKnob, tweenInfo, knobGoal)
                knobTween:Play()
                
                -- Change indicator color
                local indicatorGoal = {}
                indicatorGoal.BackgroundColor3 = Library.Theme.Background
                local indicatorTween = TweenService:Create(ToggleIndicator, tweenInfo, indicatorGoal)
                indicatorTween:Play()
                
                -- Add a slight bounce to the knob
                task.delay(0.05, function()
                    local bounceTween = TweenService:Create(
                        ToggleKnob,
                        TweenInfo.new(0.1, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out),
                        {Size = UDim2.new(0, 18, 0, 18), Position = UDim2.new(0, 1, 0.5, -9)}
                    )
                    bounceTween:Play()
                    
                    task.delay(0.1, function()
                        local returnTween = TweenService:Create(
                            ToggleKnob,
                            TweenInfo.new(0.2, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out),
                            {Size = UDim2.new(0, 16, 0, 16), Position = UDim2.new(0, 2, 0.5, -8)}
                        )
                        returnTween:Play()
                    end)
                end)
            end
            
            -- Call callback function
            if callback then
                callback(Enabled)
            end
        end
        
        -- Initialize toggle state
        UpdateToggle()
        
        -- Toggle click handler
        ToggleFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Enabled = not Enabled
                UpdateToggle()
            end
        end)
        
        -- Update canvas size
        ElementsFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 8)
        
        local ToggleObj = {}
        
        function ToggleObj:SetState(state)
            Enabled = state
            UpdateToggle()
        end
        
        function ToggleObj:GetState()
            return Enabled
        end
        
        table.insert(Library.Elements, ToggleObj)
        return ToggleObj
    end
    
    -- Function to add a slider
    function Window:AddSlider(text, min, max, default, callback)
        min = min or 0
        max = max or 100
        default = default or min
        
        local SliderFrame = Instance.new("Frame")
        SliderFrame.Name = "Slider"
        SliderFrame.Size = UDim2.new(1, 0, 0, 50)
        SliderFrame.BackgroundColor3 = Library.Theme.DarkAccent
        SliderFrame.BorderSizePixel = 0
        SliderFrame.Parent = ElementsFrame
        
        -- Add corner radius
        local SliderCorner = Instance.new("UICorner")
        SliderCorner.CornerRadius = UDim.new(0, 4)
        SliderCorner.Parent = SliderFrame
        
        -- Slider text
        local SliderText = Instance.new("TextLabel")
        SliderText.Name = "Text"
        SliderText.Size = UDim2.new(1, -16, 0, 20)
        SliderText.Position = UDim2.new(0, 8, 0, 5)
        SliderText.BackgroundTransparency = 1
        SliderText.Text = text or "Slider"
        SliderText.TextColor3 = Library.Theme.Text
        SliderText.TextSize = 14
        SliderText.Font = Enum.Font.Gotham
        SliderText.TextXAlignment = Enum.TextXAlignment.Left
        SliderText.Parent = SliderFrame
        
        -- Value display
        local ValueText = Instance.new("TextLabel")
        ValueText.Name = "Value"
        ValueText.Size = UDim2.new(0, 40, 0, 20)
        ValueText.Position = UDim2.new(1, -48, 0, 5)
        ValueText.BackgroundTransparency = 1
        ValueText.Text = tostring(default)
        ValueText.TextColor3 = Library.Theme.Text
        ValueText.TextSize = 14
        ValueText.Font = Enum.Font.Gotham
        ValueText.TextXAlignment = Enum.TextXAlignment.Right
        ValueText.Parent = SliderFrame
        
        -- Slider background
        local SliderBackground = Instance.new("Frame")
        SliderBackground.Name = "Background"
        SliderBackground.Size = UDim2.new(1, -16, 0, 6)
        SliderBackground.Position = UDim2.new(0, 8, 0, 30)
        SliderBackground.BackgroundColor3 = Library.Theme.Background
        SliderBackground.BorderSizePixel = 0
        SliderBackground.Parent = SliderFrame
        
        -- Add corner radius to background
        local BackgroundCorner = Instance.new("UICorner")
        BackgroundCorner.CornerRadius = UDim.new(1, 0)
        BackgroundCorner.Parent = SliderBackground
        
        -- Slider fill
        local SliderFill = Instance.new("Frame")
        SliderFill.Name = "Fill"
        SliderFill.Size = UDim2.new(0, 0, 1, 0)
        SliderFill.BackgroundColor3 = Library.Theme.Accent
        SliderFill.BorderSizePixel = 0
        SliderFill.Parent = SliderBackground
        
        -- Add corner radius to fill
        local FillCorner = Instance.new("UICorner")
        FillCorner.CornerRadius = UDim.new(1, 0)
        FillCorner.Parent = SliderFill
        
        -- Slider knob
        local SliderKnob = Instance.new("Frame")
        SliderKnob.Name = "Knob"
        SliderKnob.Size = UDim2.new(0, 12, 0, 12)
        SliderKnob.Position = UDim2.new(0, -6, 0.5, -6)
        SliderKnob.BackgroundColor3 = Library.Theme.Text
        SliderKnob.BorderSizePixel = 0
        SliderKnob.Parent = SliderFill
        
        -- Add corner radius to knob
        local KnobCorner = Instance.new("UICorner")
        KnobCorner.CornerRadius = UDim.new(1, 0)
        KnobCorner.Parent = SliderKnob
        
        -- Slider value and state
        local Value = default
        local Dragging = false
        
        -- Update slider appearance based on value
        local function UpdateSlider()
            -- Calculate fill percentage
            local percent = (Value - min) / (max - min)
            
            -- Update fill size
            SliderFill.Size = UDim2.new(percent, 0, 1, 0)
            
            -- Update value text
            ValueText.Text = tostring(math.floor(Value))
            
            -- Call callback function
            if callback then
                callback(Value)
            end
        end
        
        -- Initialize slider
        UpdateSlider()
        
        -- Function to update value based on mouse/touch position
        local function UpdateValue(input)
            -- Calculate relative position
            local relX = math.clamp(input.Position.X - SliderBackground.AbsolutePosition.X, 0, SliderBackground.AbsoluteSize.X)
            local percent = relX / SliderBackground.AbsoluteSize.X
            
            -- Calculate new value
            Value = min + (max - min) * percent
            
            -- Update slider
            UpdateSlider()
        end
        
        -- Slider input handlers
        SliderBackground.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = true
                UpdateValue(input)
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if Dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                UpdateValue(input)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = false
            end
        end)
        
        -- Update canvas size
        ElementsFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y + 8)
        
        local SliderObj = {}
        
        function SliderObj:SetValue(newValue)
            Value = math.clamp(newValue, min, max)
            UpdateSlider()
        end
        
        function SliderObj:GetValue()
            return Value
        end
        
        table.insert(Library.Elements, SliderObj)
        return SliderObj
    end
    
    return Window
end

return Library

