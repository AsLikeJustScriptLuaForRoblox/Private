-- Purple UI Library for Executors
-- Enhanced version with all components and executor compatibility

local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

local Player = Players.LocalPlayer
local Library = {}
Library.Elements = {}
Library.Windows = {}

-- Theme colors
Library.Theme = {
    Background = Color3.fromRGB(40, 35, 60),
    Accent = Color3.fromRGB(125, 65, 200),
    Text = Color3.fromRGB(255, 255, 255),
    Border = Color3.fromRGB(80, 70, 120),
    DarkAccent = Color3.fromRGB(90, 50, 140),
    LightAccent = Color3.fromRGB(150, 100, 230),
    Success = Color3.fromRGB(100, 220, 120),
    Warning = Color3.fromRGB(240, 180, 60),
    Error = Color3.fromRGB(220, 80, 80)
}

-- Create the main UI
function Library:CreateWindow(title, size)
    local Window = {}
    size = size or UDim2.new(0, 300, 0, 350)
    
    -- Create ScreenGui with executor protection
    local gui = Instance.new("ScreenGui")
    gui.Name = "PurpleUIScreenGui_"..tostring(math.random(1,10000))
    gui.ResetOnSpawn = false
    gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    -- Executor-specific handling
    if syn and syn.protect_gui then
        syn.protect_gui(gui)
        gui.Parent = game:GetService("CoreGui")
    elseif get_hidden_gui then
        get_hidden_gui(gui)
    else
        gui.Parent = game:GetService("CoreGui")
    end
    
    -- Main frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "PurpleUILib"
    MainFrame.Size = size
    MainFrame.Position = UDim2.new(0.5, -size.X.Offset/2, 0.5, -size.Y.Offset/2)
    MainFrame.BackgroundColor3 = Library.Theme.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.Active = true
    MainFrame.Parent = gui
    
    -- Add corner radius
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 6)
    Corner.Parent = MainFrame
    
    -- Title bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BackgroundColor3 = Library.Theme.Accent
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame
    
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 6)
    TitleCorner.Parent = TitleBar
    
    local FixTitleCorners = Instance.new("Frame")
    FixTitleCorners.Size = UDim2.new(1, 0, 0.5, 0)
    FixTitleCorners.Position = UDim2.new(0, 0, 0.5, 0)
    FixTitleCorners.BackgroundColor3 = Library.Theme.Accent
    FixTitleCorners.BorderSizePixel = 0
    FixTitleCorners.Parent = TitleBar
    
    -- Title text
    local TitleText = Instance.new("TextLabel")
    TitleText.Name = "Title"
    TitleText.Size = UDim2.new(1, -10, 1, 0)
    TitleText.Position = UDim2.new(0, 10, 0, 0)
    TitleText.BackgroundTransparency = 1
    TitleText.Text = title or "Purple UI"
    TitleText.TextColor3 = Library.Theme.Text
    TitleText.TextSize = 16
    TitleText.Font = Enum.Font.GothamSemibold
    TitleText.TextXAlignment = Enum.TextXAlignment.Left
    TitleText.Parent = TitleBar
    
    -- Close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Size = UDim2.new(0, 24, 0, 24)
    CloseButton.Position = UDim2.new(1, -27, 0, 3)
    CloseButton.BackgroundColor3 = Library.Theme.DarkAccent
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Library.Theme.Text
    CloseButton.TextSize = 14
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Parent = TitleBar
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 4)
    CloseCorner.Parent = CloseButton
    
    -- Content container
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Name = "Content"
    ContentFrame.Size = UDim2.new(1, -20, 1, -40)
    ContentFrame.Position = UDim2.new(0, 10, 0, 35)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.Parent = MainFrame
    
    -- Scrolling frame
    local ElementsFrame = Instance.new("ScrollingFrame")
    ElementsFrame.Name = "Elements"
    ElementsFrame.Size = UDim2.new(1, 0, 1, 0)
    ElementsFrame.BackgroundTransparency = 1
    ElementsFrame.BorderSizePixel = 0
    ElementsFrame.ScrollBarThickness = 4
    ElementsFrame.ScrollBarImageColor3 = Library.Theme.LightAccent
    ElementsFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    ElementsFrame.Parent = ContentFrame
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Padding = UDim.new(0, 8)
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Parent = ElementsFrame
    
    -- Draggable window
    local Dragging = false
    local DragStart, StartPos
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = input.Position
            StartPos = MainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if Dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - DragStart
            MainFrame.Position = UDim2.new(
                StartPos.X.Scale,
                StartPos.X.Offset + delta.X,
                StartPos.Y.Scale,
                StartPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = false
        end
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        gui:Destroy()
        Library.Windows[gui] = nil
    end)
    
    -- Auto-update canvas size
    UIListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        ElementsFrame.CanvasSize = UDim2.new(0, 0, 0, UIListLayout.AbsoluteContentSize.Y)
    end)
    
    -- Window methods
    function Window:AddLabel(text, color)
        local LabelFrame = Instance.new("Frame")
        LabelFrame.Name = "Label"
        LabelFrame.Size = UDim2.new(1, 0, 0, 30)
        LabelFrame.BackgroundColor3 = Library.Theme.DarkAccent
        LabelFrame.BorderSizePixel = 0
        LabelFrame.Parent = ElementsFrame
        
        local LabelCorner = Instance.new("UICorner")
        LabelCorner.CornerRadius = UDim.new(0, 4)
        LabelCorner.Parent = LabelFrame
        
        local LabelText = Instance.new("TextLabel")
        LabelText.Name = "Text"
        LabelText.Size = UDim2.new(1, -16, 1, 0)
        LabelText.Position = UDim2.new(0, 8, 0, 0)
        LabelText.BackgroundTransparency = 1
        LabelText.Text = text or "Label"
        LabelText.TextColor3 = color or Library.Theme.Text
        LabelText.TextSize = 14
        LabelText.Font = Enum.Font.Gotham
        LabelText.TextXAlignment = Enum.TextXAlignment.Left
        LabelText.Parent = LabelFrame
        
        local LabelObj = {}
        
        function LabelObj:SetText(newText)
            LabelText.Text = newText
        end
        
        function LabelObj:SetColor(newColor)
            LabelText.TextColor3 = newColor
        end
        
        table.insert(Library.Elements, LabelObj)
        return LabelObj
    end
    
    function Window:AddButton(text, callback)
        local ButtonFrame = Instance.new("Frame")
        ButtonFrame.Name = "Button"
        ButtonFrame.Size = UDim2.new(1, 0, 0, 35)
        ButtonFrame.BackgroundColor3 = Library.Theme.DarkAccent
        ButtonFrame.BorderSizePixel = 0
        ButtonFrame.Parent = ElementsFrame
        
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 4)
        ButtonCorner.Parent = ButtonFrame
        
        local Button = Instance.new("TextButton")
        Button.Name = "Button"
        Button.Size = UDim2.new(1, -16, 1, -8)
        Button.Position = UDim2.new(0, 8, 0, 4)
        Button.BackgroundColor3 = Library.Theme.Accent
        Button.Text = text or "Button"
        Button.TextColor3 = Library.Theme.Text
        Button.TextSize = 14
        Button.Font = Enum.Font.Gotham
        Button.Parent = ButtonFrame
        
        local ButtonInnerCorner = Instance.new("UICorner")
        ButtonInnerCorner.CornerRadius = UDim.new(0, 4)
        ButtonInnerCorner.Parent = Button
        
        Button.MouseButton1Click:Connect(function()
            local bounceIn = TweenService:Create(
                Button, 
                TweenInfo.new(0.1, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), 
                {Size = UDim2.new(0.95, -16, 0.9, -8), Position = UDim2.new(0.025, 8, 0.05, 4)}
            )
            
            local bounceOut = TweenService:Create(
                Button, 
                TweenInfo.new(0.2, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out), 
                {Size = UDim2.new(1, -16, 1, -8), Position = UDim2.new(0, 8, 0, 4)}
            )
            
            bounceIn:Play()
            bounceIn.Completed:Connect(function()
                bounceOut:Play()
                if callback then callback() end
            end)
        end)
        
        local ButtonObj = {}
        
        function ButtonObj:SetText(newText)
            Button.Text = newText
        end
        
        table.insert(Library.Elements, ButtonObj)
        return ButtonObj
    end
    
    function Window:AddToggle(text, default, callback)
        local ToggleFrame = Instance.new("Frame")
        ToggleFrame.Name = "Toggle"
        ToggleFrame.Size = UDim2.new(1, 0, 0, 35)
        ToggleFrame.BackgroundColor3 = Library.Theme.DarkAccent
        ToggleFrame.BorderSizePixel = 0
        ToggleFrame.Parent = ElementsFrame
        
        local ToggleCorner = Instance.new("UICorner")
        ToggleCorner.CornerRadius = UDim.new(0, 4)
        ToggleCorner.Parent = ToggleFrame
        
        local ToggleText = Instance.new("TextLabel")
        ToggleText.Name = "Text"
        ToggleText.Size = UDim2.new(1, -60, 1, 0)
        ToggleText.Position = UDim2.new(0, 8, 0, 0)
        ToggleText.BackgroundTransparency = 1
        ToggleText.Text = text or "Toggle"
        ToggleText.TextColor3 = Library.Theme.Text
        ToggleText.TextSize = 14
        ToggleText.Font = Enum.Font.Gotham
        ToggleText.TextXAlignment = Enum.TextXAlignment.Left
        ToggleText.Parent = ToggleFrame
        
        local ToggleIndicator = Instance.new("Frame")
        ToggleIndicator.Name = "Indicator"
        ToggleIndicator.Size = UDim2.new(0, 40, 0, 20)
        ToggleIndicator.Position = UDim2.new(1, -48, 0.5, -10)
        ToggleIndicator.BackgroundColor3 = Library.Theme.Background
        ToggleIndicator.BorderSizePixel = 0
        ToggleIndicator.Parent = ToggleFrame
        
        local IndicatorCorner = Instance.new("UICorner")
        IndicatorCorner.CornerRadius = UDim.new(1, 0)
        IndicatorCorner.Parent = ToggleIndicator
        
        local ToggleKnob = Instance.new("Frame")
        ToggleKnob.Name = "Knob"
        ToggleKnob.Size = UDim2.new(0, 16, 0, 16)
        ToggleKnob.Position = UDim2.new(0, 2, 0.5, -8)
        ToggleKnob.BackgroundColor3 = Library.Theme.Text
        ToggleKnob.BorderSizePixel = 0
        ToggleKnob.Parent = ToggleIndicator
        
        local KnobCorner = Instance.new("UICorner")
        KnobCorner.CornerRadius = UDim.new(1, 0)
        KnobCorner.Parent = ToggleKnob
        
        local Enabled = default or false
        
        local function UpdateToggle()
            local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out)
            
            if Enabled then
                local knobTween = TweenService:Create(ToggleKnob, tweenInfo, {Position = UDim2.new(0, 22, 0.5, -8)})
                local indicatorTween = TweenService:Create(ToggleIndicator, tweenInfo, {BackgroundColor3 = Library.Theme.Accent})
                knobTween:Play()
                indicatorTween:Play()
            else
                local knobTween = TweenService:Create(ToggleKnob, tweenInfo, {Position = UDim2.new(0, 2, 0.5, -8)})
                local indicatorTween = TweenService:Create(ToggleIndicator, tweenInfo, {BackgroundColor3 = Library.Theme.Background})
                knobTween:Play()
                indicatorTween:Play()
            end
            
            if callback then callback(Enabled) end
        end
        
        UpdateToggle()
        
        ToggleFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Enabled = not Enabled
                UpdateToggle()
            end
        end)
        
        local ToggleObj = {}
        
        function ToggleObj:SetState(state)
            Enabled = state
            UpdateToggle()
        end
        
        function ToggleObj:GetState()
            return Enabled
        end
        
        table.insert(Library.Elements, ToggleObj)
        return ToggleObj
    end
    
    function Window:AddSlider(text, min, max, default, callback)
        min = min or 0
        max = max or 100
        default = default or min
        
        local SliderFrame = Instance.new("Frame")
        SliderFrame.Name = "Slider"
        SliderFrame.Size = UDim2.new(1, 0, 0, 50)
        SliderFrame.BackgroundColor3 = Library.Theme.DarkAccent
        SliderFrame.BorderSizePixel = 0
        SliderFrame.Parent = ElementsFrame
        
        local SliderCorner = Instance.new("UICorner")
        SliderCorner.CornerRadius = UDim.new(0, 4)
        SliderCorner.Parent = SliderFrame
        
        local SliderText = Instance.new("TextLabel")
        SliderText.Name = "Text"
        SliderText.Size = UDim2.new(1, -16, 0, 20)
        SliderText.Position = UDim2.new(0, 8, 0, 5)
        SliderText.BackgroundTransparency = 1
        SliderText.Text = text or "Slider"
        SliderText.TextColor3 = Library.Theme.Text
        SliderText.TextSize = 14
        SliderText.Font = Enum.Font.Gotham
        SliderText.TextXAlignment = Enum.TextXAlignment.Left
        SliderText.Parent = SliderFrame
        
        local ValueText = Instance.new("TextLabel")
        ValueText.Name = "Value"
        ValueText.Size = UDim2.new(0, 40, 0, 20)
        ValueText.Position = UDim2.new(1, -48, 0, 5)
        ValueText.BackgroundTransparency = 1
        ValueText.Text = tostring(default)
        ValueText.TextColor3 = Library.Theme.Text
        ValueText.TextSize = 14
        ValueText.Font = Enum.Font.Gotham
        ValueText.TextXAlignment = Enum.TextXAlignment.Right
        ValueText.Parent = SliderFrame
        
        local SliderBackground = Instance.new("Frame")
        SliderBackground.Name = "Background"
        SliderBackground.Size = UDim2.new(1, -16, 0, 6)
        SliderBackground.Position = UDim2.new(0, 8, 0, 30)
        SliderBackground.BackgroundColor3 = Library.Theme.Background
        SliderBackground.BorderSizePixel = 0
        SliderBackground.Parent = SliderFrame
        
        local BackgroundCorner = Instance.new("UICorner")
        BackgroundCorner.CornerRadius = UDim.new(1, 0)
        BackgroundCorner.Parent = SliderBackground
        
        local SliderFill = Instance.new("Frame")
        SliderFill.Name = "Fill"
        SliderFill.Size = UDim2.new(0, 0, 1, 0)
        SliderFill.BackgroundColor3 = Library.Theme.Accent
        SliderFill.BorderSizePixel = 0
        SliderFill.Parent = SliderBackground
        
        local FillCorner = Instance.new("UICorner")
        FillCorner.CornerRadius = UDim.new(1, 0)
        FillCorner.Parent = SliderFill
        
        local SliderKnob = Instance.new("Frame")
        SliderKnob.Name = "Knob"
        SliderKnob.Size = UDim2.new(0, 12, 0, 12)
        SliderKnob.Position = UDim2.new(0, -6, 0.5, -6)
        SliderKnob.BackgroundColor3 = Library.Theme.Text
        SliderKnob.BorderSizePixel = 0
        SliderKnob.Parent = SliderFill
        
        local KnobCorner = Instance.new("UICorner")
        KnobCorner.CornerRadius = UDim.new(1, 0)
        KnobCorner.Parent = SliderKnob
        
        local Value = default
        local Dragging = false
        
        local function UpdateSlider()
            local percent = (Value - min) / (max - min)
            SliderFill.Size = UDim2.new(percent, 0, 1, 0)
            ValueText.Text = tostring(math.floor(Value))
            if callback then callback(Value) end
        end
        
        UpdateSlider()
        
        local function UpdateValue(input)
            local relX = math.clamp(input.Position.X - SliderBackground.AbsolutePosition.X, 0, SliderBackground.AbsoluteSize.X)
            Value = min + (max - min) * (relX / SliderBackground.AbsoluteSize.X)
            UpdateSlider()
        end
        
        SliderBackground.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = true
                UpdateValue(input)
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if Dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                UpdateValue(input)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = false
            end
        end)
        
        local SliderObj = {}
        
        function SliderObj:SetValue(newValue)
            Value = math.clamp(newValue, min, max)
            UpdateSlider()
        end
        
        function SliderObj:GetValue()
            return Value
        end
        
        table.insert(Library.Elements, SliderObj)
        return SliderObj
    end
    
    function Window:AddDropdown(text, options, default, callback)
        options = options or {}
        default = default or options[1]
        
        local DropdownFrame = Instance.new("Frame")
        DropdownFrame.Name = "Dropdown"
        DropdownFrame.Size = UDim2.new(1, 0, 0, 60)
        DropdownFrame.BackgroundTransparency = 1
        DropdownFrame.ClipsDescendants = true
        DropdownFrame.Parent = ElementsFrame
        
        local DropdownText = Instance.new("TextLabel")
        DropdownText.Name = "Text"
        DropdownText.Size = UDim2.new(1, 0, 0, 20)
        DropdownText.Position = UDim2.new(0, 0, 0, 0)
        DropdownText.BackgroundTransparency = 1
        DropdownText.Text = text or "Dropdown"
        DropdownText.TextColor3 = Library.Theme.Text
        DropdownText.TextSize = 14
        DropdownText.Font = Enum.Font.Gotham
        DropdownText.TextXAlignment = Enum.TextXAlignment.Left
        DropdownText.Parent = DropdownFrame
        
        local DropdownButton = Instance.new("TextButton")
        DropdownButton.Name = "Button"
        DropdownButton.Size = UDim2.new(1, 0, 0, 30)
        DropdownButton.Position = UDim2.new(0, 0, 0, 25)
        DropdownButton.BackgroundColor3 = Library.Theme.DarkAccent
        DropdownButton.Text = default
        DropdownButton.TextColor3 = Library.Theme.Text
        DropdownButton.TextSize = 14
        DropdownButton.Font = Enum.Font.Gotham
        DropdownButton.Parent = DropdownFrame
        
        local ButtonCorner = Instance.new("UICorner")
        ButtonCorner.CornerRadius = UDim.new(0, 4)
        ButtonCorner.Parent = DropdownButton
        
        local DropdownIcon = Instance.new("ImageLabel")
        DropdownIcon.Name = "Icon"
        DropdownIcon.Size = UDim2.new(0, 16, 0, 16)
        DropdownIcon.Position = UDim2.new(1, -25, 0.5, -8)
        DropdownIcon.BackgroundTransparency = 1
        DropdownIcon.Image = "rbxassetid://6031091004"
        DropdownIcon.ImageColor3 = Library.Theme.Text
        DropdownIcon.Parent = DropdownButton
        
        local OptionsFrame = Instance.new("Frame")
        OptionsFrame.Name = "Options"
        OptionsFrame.Size = UDim2.new(1, 0, 0, #options * 30)
        OptionsFrame.Position = UDim2.new(0, 0, 0, 60)
        OptionsFrame.BackgroundColor3 = Library.Theme.DarkAccent
        OptionsFrame.Visible = false
        OptionsFrame.Parent = DropdownFrame
        
        local OptionsCorner = Instance.new("UICorner")
        OptionsCorner.CornerRadius = UDim.new(0, 4)
        OptionsCorner.Parent = OptionsFrame
        
        local IsOpen = false
        local Selected = default
        
        local function ToggleDropdown()
            IsOpen = not IsOpen
            
            if IsOpen then
                DropdownFrame.Size = UDim2.new(1, 0, 0, 60 + #options * 30)
                OptionsFrame.Visible = true
                TweenService:Create(DropdownIcon, TweenInfo.new(0.2), {Rotation = 180}):Play()
            else
                TweenService:Create(DropdownIcon, TweenInfo.new(0.2), {Rotation = 0}):Play()
                TweenService:Create(DropdownFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 60)}):Play()
                task.delay(0.2, function() OptionsFrame.Visible = false end)
            end
        end
        
        DropdownButton.MouseButton1Click:Connect(ToggleDropdown)
        
        for i, option in ipairs(options) do
            local OptionButton = Instance.new("TextButton")
            OptionButton.Name = "Option_"..option
            OptionButton.Size = UDim2.new(1, 0, 0, 30)
            OptionButton.Position = UDim2.new(0, 0, 0, (i-1)*30)
            OptionButton.BackgroundTransparency = 1
            OptionButton.Text = option
            OptionButton.TextColor3 = Library.Theme.Text
            OptionButton.TextSize = 14
            OptionButton.Font = Enum.Font.Gotham
            OptionButton.Parent = OptionsFrame
            
            OptionButton.MouseButton1Click:Connect(function()
                Selected = option
                DropdownButton.Text = option
                ToggleDropdown()
                if callback then callback(option) end
            end)
        end
        
        local DropdownObj = {}
        
        function DropdownObj:SetOptions(newOptions)
            OptionsFrame:ClearAllChildren()
            for i, option in ipairs(newOptions) do
                local OptionButton = Instance.new("TextButton")
                OptionButton.Name = "Option_"..option
                OptionButton.Size = UDim2.new(1, 0, 0, 30)
                OptionButton.Position = UDim2.new(0, 0, 0, (i-1)*30)
                OptionButton.BackgroundTransparency = 1
                OptionButton.Text = option
                OptionButton.TextColor3 = Library.Theme.Text
                OptionButton.TextSize = 14
                OptionButton.Font = Enum.Font.Gotham
                OptionButton.Parent = OptionsFrame
                
                OptionButton.MouseButton1Click:Connect(function()
                    Selected = option
                    DropdownButton.Text = option
                    ToggleDropdown()
                    if callback then callback(option) end
                end)
            end
            OptionsFrame.Size = UDim2.new(1, 0, 0, #newOptions * 30)
        end
        
        function DropdownObj:GetSelected()
            return Selected
        end
        
        table.insert(Library.Elements, DropdownObj)
        return DropdownObj
    end
    
    Library.Windows[gui] = Window
    return Window
end

-- Destroy all UI elements
function Library:DestroyAll()
    for gui, _ in pairs(Library.Windows) do
        gui:Destroy()
    end
    Library.Windows = {}
    Library.Elements = {}
end

return Library
